import random
from dataclasses import dataclass, field
from typing import Optional
from enum import Enum

# -------------------------------
# Role & Tier Definitions
# -------------------------------
class Role(str, Enum):
    B = "B"
    W = "W"
    A = "A"
    P = "P"
    S = "S"

TIERS = [
    (1, 0.30, 1.50),
    (2, 1.50, 2.75),
    (3, 3.00, 4.75),
    (4, 5.00, 6.50),
    (5, 7.00, 8.50),
    (6, 9.00,10.50),
    (7,11.00,12.50),
    (8,13.00,15.50),
    (9,16.00,18.00),
]

# -------------------------------
# Player & Team Models
# -------------------------------
@dataclass
class Player:
    name: str
    slot: str
    base_price: float
    previous_team: Optional[str]
    age: int
    role: Role

    # Points
    skill_points: float = 0
    multidim_points: float = 0
    impact_points: float = 0
    stats_points: float = 0
    experience_points: float = 0
    total_points: float = 0

    # Hidden tier info
    _tier_id: Optional[int] = field(default=None, repr=False)
    _tier_lo: Optional[float] = field(default=None, repr=False)
    _tier_hi: Optional[float] = field(default=None, repr=False)
    _hidden_reserve: Optional[float] = field(default=None, repr=False)

@dataclass
class Team:
    name: str
    total_slots: int
    purse: float
    squad: list = field(default_factory=list)

    def has_slot(self) -> bool:
        return len(self.squad) < self.total_slots

    def can_afford(self, price: float) -> bool:
        return self.purse >= price

    def add_player(self, player: Player, price: float):
        self.squad.append(player)
        self.purse -= price

# -------------------------------
# Tier & Points Logic
# -------------------------------
def tier_band(tier_id: int):
    for tid, lo, hi in TIERS:
        if tid == tier_id:
            return lo, hi
    return 1.0, 1.5

def points_to_tier(points: float) -> int:
    if points < 4: return 1
    elif points < 5: return 2
    elif points < 6: return 3
    elif points < 7: return 4
    elif points < 8: return 5
    elif points < 9: return 6
    elif points < 10: return 7
    elif points < 11: return 8
    else: return 9

def assign_points(player: Player, rng: random.Random) -> Player:
    # Skill
    player.skill_points = {
        Role.B:1.0, Role.P:0.9, Role.S:0.85, Role.A:0.95, Role.W:0.95
    }[player.role]

    # Multidimensionality (allrounder or wicketkeeping versatility)
    player.multidim_points = 1.0 if player.role in (Role.A, Role.W) else 0.7

    # Impact, Stats, Experience
    player.impact_points = 0.8 + 0.2 * rng.random()
    player.stats_points = 0.7 + 0.3 * rng.random()
    player.experience_points = 0.6 + 0.4 * rng.random()

    # Age factor
    if 25 <= player.age <= 35:
        age_factor = 1.0
    elif player.age < 25:
        age_factor = 0.9
    else:
        age_factor = 0.8

    # Total points (ignoring base price)
    player.total_points = (
        2*player.skill_points +
        1.2*player.multidim_points +
        1.5*player.impact_points +
        1.5*player.stats_points +
        1.0*player.experience_points
    ) * age_factor

    return player

def assign_tier(player: Player, rng: random.Random) -> Player:
    player = assign_points(player, rng)
    points_tier = points_to_tier(player.total_points)
    base_tier = {Role.A:5, Role.W:4, Role.B:3, Role.P:4, Role.S:4}[player.role]
    final_tier = max(base_tier, points_tier)
    lo, hi = tier_band(final_tier)
    reserve = round(rng.uniform(lo, hi), 2)
    player._tier_id = final_tier
    player._tier_lo = lo
    player._tier_hi = hi
    player._hidden_reserve = reserve
    return player

# -------------------------------
# AI Bid Logic
# -------------------------------
def ai_bid(team: Team, player: Player, current_bid: float, rng: random.Random):
    if not team.has_slot() or not team.can_afford(player.base_price):
        return None
    reserve = player._hidden_reserve
    tier_hi = player._tier_hi
    # Â±0.5Cr bid around reserve
    bid = reserve + rng.choice([-0.5,0,0.5])
    bid = min(bid, tier_hi)
    # Must be higher than current bid
    if current_bid is not None and bid <= current_bid:
        return None
    if bid > team.purse:
        return None
    return round(bid,2)

# -------------------------------
# Example
# -------------------------------
if __name__ == "__main__":
    rng = random.Random(42)
    p = Player(name="Jos Buttler", slot="O", base_price=2.0, previous_team="RR", age=31, role=Role.W)
    p = assign_tier(p, rng)
    print(f"Player: {p.name}, Tier: {p._tier_id}, Hidden Reserve: {p._hidden_reserve}Cr, Total Points: {p.total_points:.2f}")