import random
from dataclasses import dataclass, field
from typing import Optional, List, Tuple
from enum import Enum

# -------------------------------
# Role & Tier Definitions
# -------------------------------
class Role(str, Enum):
    B = "B"  # Batter
    W = "W"  # Wicket-keeper
    A = "A"  # Allrounder
    P = "P"  # Pace
    S = "S"  # Spin

TIERS = [
    (1, 0.30, 1.50),
    (2, 1.50, 2.75),
    (3, 3.00, 4.75),
    (4, 5.00, 6.50),
    (5, 7.00, 8.50),
    (6, 9.00,10.50),
    (7,11.00,12.50),
    (8,13.00,15.50),
    (9,16.00,18.00),
]

# -------------------------------
# Player Model
# -------------------------------
@dataclass
class Player:
    name: str
    slot: str
    base_price: float
    previous_team: Optional[str]
    age: Optional[int]
    role: Optional[Role]

    # Points
    skill_points: Optional[float] = None
    value_points: Optional[float] = None
    multidim_points: Optional[float] = None
    impact_points: Optional[float] = None
    stats_points: Optional[float] = None
    number_points: Optional[float] = None
    total_points: Optional[float] = None

    # Hidden tier/reserve info
    _tier_id: Optional[int] = field(default=None, repr=False)
    _tier_lo: Optional[float] = field(default=None, repr=False)
    _tier_hi: Optional[float] = field(default=None, repr=False)
    _hidden_reserve: Optional[float] = field(default=None, repr=False)

# -------------------------------
# Tier allocation helpers
# -------------------------------
def tier_band(tier_id: int) -> Tuple[float, float]:
    for tid, lo, hi in TIERS:
        if tid == tier_id:
            return lo, hi
    return 1.0, 1.5

def points_to_tier(total_points: float) -> int:
    """Map points (0-10 approx) to tier 1-9"""
    if total_points < 4:
        return 1
    elif total_points < 5:
        return 2
    elif total_points < 6:
        return 3
    elif total_points < 7:
        return 4
    elif total_points < 8:
        return 5
    elif total_points < 9:
        return 6
    elif total_points < 10:
        return 7
    elif total_points < 11:
        return 8
    else:
        return 9

# -------------------------------
# Points Calculation
# -------------------------------
def calculate_points(player: Player, rng: random.Random) -> Player:
    # Skill: technical ability
    player.skill_points = {
        Role.B: 1.0,
        Role.P: 0.9,
        Role.S: 0.85,
        Role.A: 0.95,
        Role.W: 0.9
    }.get(player.role, 0.8)

    # Value: base price vs expected auction value  
    player.value_points = min(1.0, max(0.5, player.base_price / 10))  

    # Multidimensionality: versatility  
    player.multidim_points = 1.0 if player.role == Role.A else 0.7  

    # Impact: match-winning ability  
    player.impact_points = 0.8 + 0.2 * rng.random()  

    # Stats: batting avg, SR, bowling economy  
    player.stats_points = 0.7 + 0.3 * rng.random()  

    # Experience: international caps / career numbers  
    player.number_points = 0.6 + 0.4 * rng.random()  

    # Age factor  
    if player.age:  
        if 25 <= player.age <= 35:  
            age_factor = 1.0  
        elif player.age < 25:  
            age_factor = 0.9  
        else:  
            age_factor = 0.8  
    else:  
        age_factor = 0.9  

    # Total points: weighted sum  
    player.total_points = (  
        2*player.skill_points +  
        1.5*player.value_points +  
        1.2*player.multidim_points +  
        1.5*player.impact_points +  
        1.5*player.stats_points +  
        1.0*player.number_points  
    ) * age_factor  

    return player

# -------------------------------
# Assign tier & hidden reserve
# -------------------------------
def assign_tier(player: Player, rng: random.Random) -> Player:
    # Calculate points first
    player = calculate_points(player, rng)

    # Determine points-based tier  
    points_tier = points_to_tier(player.total_points)  

    # Determine final tier (can bump above base tier)  
    base_tier = {  
        Role.A: 5, Role.W:4, Role.B:3, Role.P:4, Role.S:4  
    }.get(player.role, 3)  
    final_tier = max(base_tier, points_tier)  

    # Assign hidden tier info  
    lo, hi = tier_band(final_tier)  
    anchor = max(player.base_price, lo)  

    # Hidden reserve randomized within tier band  
    reserve = rng.uniform(anchor, hi)  
    reserve = round(reserve + 1e-9, 2)  

    player._tier_id = final_tier  
    player._tier_lo = lo  
    player._tier_hi = hi  
    player._hidden_reserve = reserve  

    return player

# -------------------------------
# Example Usage
# -------------------------------
if __name__ == "__main__":
    rng = random.Random(42)

    player = Player(  
        name="Jos Buttler",  
        slot="O",  
        base_price=2.0,  
        previous_team="RR",  
        age=31,  
        role=Role.W  
    )  

    player = assign_tier(player, rng)  

    # Human sees only base info, not tier/reserve  
    print(f"Player: {player.name}, Role: {player.role}, Base Price: {player.base_price}Cr, Age: {player.age}")  
    # AI/internal can use:  
    print(f"(Hidden) Tier: {player._tier_id}, Reserve: {player._hidden_reserve}Cr, Total Points: {player.total_points:.2f}")