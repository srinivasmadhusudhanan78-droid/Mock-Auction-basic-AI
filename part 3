# -------------------------------
# Tier Allocation Logic
# -------------------------------
def assign_points(player: Player) -> Player:
    """Compute points across multiple dimensions."""

    # 1️⃣ Skill (batting/bowling proficiency, technique)
    player.skill_points = 0
    if player.role == Role.B:
        player.skill_points = 1.0  # base
    elif player.role == Role.P:
        player.skill_points = 0.9
    elif player.role == Role.S:
        player.skill_points = 0.85
    elif player.role == Role.A:
        player.skill_points = 0.95
    elif player.role == Role.W:
        player.skill_points = 0.9

    # 2️⃣ Value (team fit, base price vs potential)
    player.value_points = max(0.5, min(1.0, player.base_price / 10))

    # 3️⃣ Multidimensionality (allrounder vs specialized)
    player.multidim_points = 1.0 if player.role == Role.A else 0.7

    # 4️⃣ Impact (clutch performance, match-winning ability)
    player.impact_points = 0.8 + 0.2 * random.random()  # randomized for simplicity

    # 5️⃣ Stats (career averages, strike rate, economy)
    player.stats_points = 0.7 + 0.3 * random.random()

    # 6️⃣ Number (experience, international caps)
    player.experience_points = 0.6 + 0.4 * random.random()

    # 7️⃣ Age adjustment
    if player.age:
        if 25 <= player.age <= 35:  # updated age category
            age_factor = 1.0
        elif player.age < 25:
            age_factor = 0.9
        else:
            age_factor = 0.8
    else:
        age_factor = 0.9

    # Total points: weighted sum
    player.total_points = (
        2*player.skill_points +
        1.5*player.value_points +
        1.2*player.multidim_points +
        1.5*player.impact_points +
        1.5*player.stats_points +
        1.0*player.experience_points
    ) * age_factor

    return player

def points_to_tier(total_points: float) -> int:
    """Map total points (0-10 approx) to tier 1-9"""
    if total_points < 4:
        return 1
    elif total_points < 5:
        return 2
    elif