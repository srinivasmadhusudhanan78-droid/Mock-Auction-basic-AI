# -------------------------------
# Tier Allocation Logic
# -------------------------------
def assign_points(player: Player) -> Player:
    """Compute points across multiple dimensions."""

    # 1️⃣ Skill (batting/bowling proficiency, technique)
    player.skill_points = 0
    if player.role == Role.B:
        player.skill_points = 1.0  # base
    elif player.role == Role.P:
        player.skill_points = 0.9
    elif player.role == Role.S:
        player.skill_points = 0.85
    elif player.role == Role.A:
        player.skill_points = 0.95
    elif player.role == Role.W:
        player.skill_points = 0.9

    # 2️⃣ Value (team fit, base price vs potential)
    player.value_points = max(0.5, min(1.0, player.base_price / 10))

    # 3️⃣ Multidimensionality (allrounder vs specialized)
    player.multidim_points = 1.0 if player.role == Role.A else 0.7

    # 4️⃣ Impact (clutch performance, match-winning ability)
    player.impact_points = 0.8 + 0.2 * random.random()  # randomized for simplicity

    # 5️⃣ Stats (career averages, strike rate, economy)
    player.stats_points = 0.7 + 0.3 * random.random()

    # 6️⃣ Number (experience, international caps)
    player.experience_points = 0.6 + 0.4 * random.random()

    # 7️⃣ Age adjustment
    if player.age:
        if 25 <= player.age <= 35:  # updated age category
            age_factor = 1.0
        elif player.age < 25:
            age_factor = 0.9
        else:
            age_factor = 0.8
    else:
        age_factor = 0.9

    # Total points: weighted sum
    player.total_points = (
        2*player.skill_points +
        1.5*player.value_points +
        1.2*player.multidim_points +
        1.5*player.impact_points +
        1.5*player.stats_points +
        1.0*player.experience_points
    ) * age_factor

    return player

def points_to_tier(total_points: float) -> int:
    """Map total points (0-10 approx) to tier 1-9"""
    if total_points < 4:
        return 1
    elif total_points < 5:
        return 2
    elif total_points < 6:
        return 3
    elif total_points < 7:
        return 4
    elif total_points < 8:
        return 5
    elif total_points < 9:
        return 6
    elif total_points < 10:
        return 7
    elif total_points < 11:
        return 8
    else:
        return 9

def tier_band(tier_id: int) -> Tuple[float, float]:
    for tid, lo, hi in TIERS:
        if tid == tier_id:
            return (lo, hi)
    return (1.0, 1.5)

def assign_tier_and_reserve(player: Player, rng: random.Random) -> Player:
    player = assign_points(player)
    tier = points_to_tier(player.total_points or 1)
    lo, hi = tier_band(tier)
    anchor = max(player.base_price, lo)
    reserve = rng.uniform(anchor, hi)
    reserve = round(reserve + 1e-9, 2)
    player._tier_id = tier
    player._tier_lo = lo
    player._tier_hi = hi
    player._hidden_reserve = reserve
    return player

# -------------------------------
# Example Usage
# -------------------------------
if __name__ == "__main__":
    rng = random.Random(42)
    p = Player(name="Jos Buttler", slot="O", base_price=2.0, previous_team="RR", age=31, role=Role.W)
    p = assign_tier_and_reserve(p, rng)
    print(f"Player: {p.name}, Tier: {p._tier_id}, Reserve: {p._hidden_reserve}Cr, Total Points: {p.total_points:.2f}")

# -------------------------------
# Realistic Player Tier Allocation Model
# -------------------------------
from dataclasses import dataclass, field
from enum import Enum
from typing import Optional, Tuple, Dict
import random

class Role(str, Enum):
    B = "B"
    W = "W"
    A = "A"
    P = "P"
    S = "S"

TIERS = [
    (1, 0.30, 1.50),
    (2, 1.50, 2.75),
    (3, 3.00, 4.75),
    (4, 5.00, 6.50),
    (5, 7.00, 8.50),
    (6, 9.00,10.50),
    (7,11.00,12.50),
    (8,13.00,15.50),
    (9,16.00,18.00),
]

@dataclass
class Player:
    name: str
    slot: str
    base_price: float
    previous_team: Optional[str]
    age: Optional[int]
    role: Optional[Role]

    # points
    skill_points: float = 0
    value_points: float = 0
    multidim_points: float = 0
    impact_points: float = 0
    stats_points: float = 0
    experience_points: float = 0
    total_points: float = 0

    # tier (hidden from user)
    _tier_id: Optional[int] = field(default=None, repr=False)
    _tier_lo: Optional[float] = field(default=None, repr=False)
    _tier_hi: Optional[float] = field(default=None, repr=False)
    _hidden_reserve: Optional[float] = field(default=None, repr=False)